{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/elias/Desktop/reddit-gallery-react-redux/frontend/src/containers/ResetPasswordConfirm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { reset_password_confirm } from '../actions/auth';\nimport { Button, TextField, Grid, Box, Typography, Container, CssBaseline } from '@material-ui/core';\nimport { authStyles } from '../styles/authModal';\n\nconst ResetPasswordConfirm = ({\n  match,\n  reset_password_confirm\n}) => {\n  _s();\n\n  const classes = authStyles();\n  const [requestSent, setRequestSent] = useState(false);\n  const [formData, setFormData] = useState({\n    new_password: '',\n    re_new_password: ''\n  });\n  const {\n    new_password,\n    re_new_password\n  } = formData;\n\n  const onChange = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const uid = match.params.uid;\n    const token = match.params.token;\n    reset_password_confirm(uid, token, new_password, re_new_password);\n    setRequestSent(true);\n  };\n\n  if (requestSent) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: classes.container,\n      component: \"main\",\n      maxWidth: \"xs\",\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.paper,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Request Password Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: e => onSubmit(e),\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                name: \"new_password\",\n                value: new_password,\n                label: \"New Password\",\n                type: \"password\",\n                id: \"password\",\n                onChange: e => onChange(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                name: \"re_new_password\",\n                value: re_new_password,\n                label: \"Confirm New Password\",\n                type: \"password\",\n                id: \"password\",\n                onChange: e => onChange(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            color: \"primary\",\n            className: classes.submit,\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPasswordConfirm, \"mvS6i7JB6T7h7Xg1xfK6CtvPWwk=\");\n\n_c = ResetPasswordConfirm;\nexport default connect(null, {\n  reset_password_confirm\n})(ResetPasswordConfirm);\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordConfirm\");","map":{"version":3,"sources":["/home/elias/Desktop/reddit-gallery-react-redux/frontend/src/containers/ResetPasswordConfirm.js"],"names":["React","useState","Link","Redirect","connect","reset_password_confirm","Button","TextField","Grid","Box","Typography","Container","CssBaseline","authStyles","ResetPasswordConfirm","match","classes","requestSent","setRequestSent","formData","setFormData","new_password","re_new_password","onChange","e","target","name","value","onSubmit","preventDefault","uid","params","token","container","paper","form","submit"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { reset_password_confirm } from '../actions/auth';\r\n\r\nimport { Button, TextField, Grid, Box, Typography,\r\n  Container, CssBaseline, } from '@material-ui/core';\r\n\r\nimport { authStyles } from '../styles/authModal' \r\n\r\nconst ResetPasswordConfirm = ({ match, reset_password_confirm }) => {\r\n  const classes = authStyles();\r\n\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    new_password: '',\r\n    re_new_password: ''\r\n  });\r\n\r\n  const { new_password, re_new_password } = formData;\r\n\r\n  const onChange = e => {\r\n    setFormData({...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const uid = match.params.uid;\r\n    const token = match.params.token;\r\n\r\n    reset_password_confirm(uid, token, new_password, re_new_password);\r\n    setRequestSent(true);\r\n  };\r\n\r\n  if(requestSent) {\r\n    return <Redirect to='/'/>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n        <Container className={classes.container} component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline/>\r\n          <div className={classes.paper}>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Request Password Reset\r\n            </Typography>\r\n            <form className={classes.form} onSubmit={e => onSubmit(e)} noValidate>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"new_password\"\r\n                    value={new_password}\r\n                    label=\"New Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    onChange={e => onChange(e)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"re_new_password\"\r\n                    value={re_new_password}\r\n                    label=\"Confirm New Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    onChange={e => onChange(e)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}>\r\n                Reset Password\r\n              </Button>\r\n            </form>\r\n          </div>\r\n          <Box mt={5}>\r\n          </Box>\r\n        </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(null, { reset_password_confirm })(ResetPasswordConfirm);"]},"metadata":{},"sourceType":"module"}