{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, LOAD_USER_SUCCESS, LOAD_USER_FAIL, USER_LOADING, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, LOGOUT } from './types';\nexport const checkAuthenticated = () => async dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = () => async dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: LOAD_USER_SUCCESS,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: LOAD_USER_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: LOAD_USER_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (username, email, password, re_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/elias/Desktop/reddit-gallery-react-redux/frontend/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","LOAD_USER_SUCCESS","LOAD_USER_FAIL","USER_LOADING","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","LOGOUT","checkAuthenticated","dispatch","type","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","data","code","error","load_user","get","payload","login","email","password","signup","username","re_password","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAIL,\r\n  USER_LOADING,\r\n  AUTHENTICATED_SUCCESS,\r\n  AUTHENTICATED_FAIL,\r\n  PASSWORD_RESET_FAIL,\r\n  PASSWORD_RESET_SUCCESS,\r\n  PASSWORD_RESET_CONFIRM_FAIL,\r\n  PASSWORD_RESET_CONFIRM_SUCCESS,\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAIL,\r\n  ACTIVATION_SUCCESS,\r\n  ACTIVATION_FAIL,\r\n  LOGOUT,\r\n} from './types';\r\n\r\nexport const checkAuthenticated = () => async dispatch => {\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  if (localStorage.getItem('access')) {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      }\r\n    };\r\n    const body = JSON.stringify({ token: localStorage.getItem('access')});\r\n\r\n    try {\r\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\r\n\r\n      if(res.data.code !== 'token_not_valid') {\r\n        dispatch({\r\n          type:AUTHENTICATED_SUCCESS\r\n        });\r\n      }else{\r\n        dispatch({\r\n          type: AUTHENTICATED_FAIL\r\n        });\r\n      }\r\n    } catch (error) {\r\n        dispatch({\r\n          type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n\r\n  } else {\r\n    dispatch({\r\n      type: AUTHENTICATED_FAIL\r\n    });\r\n  }\r\n}\r\n\r\nexport const load_user = () => async dispatch => {\r\n  dispatch({ type: USER_LOADING });\r\n  if (localStorage.getItem('access')) {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n        'Accept': 'application/json'\r\n      }\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`,config);\r\n      \r\n      dispatch({\r\n        type: LOAD_USER_SUCCESS,\r\n        payload: res.data\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: LOAD_USER_FAIL\r\n      });\r\n    }\r\n  } else{\r\n    dispatch({\r\n      type: LOAD_USER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({email, password});\r\n\r\n  try {\r\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\r\n    \r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(load_user());\r\n\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\nexport const signup = (username, email, password, re_password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({username, email, password, re_password});\r\n\r\n  try {\r\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\r\n    \r\n    dispatch({\r\n      type: SIGNUP_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SIGNUP_FAIL\r\n    });\r\n  }\r\n};\r\n\r\nexport const verify = (uid, token) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({ uid, token });\r\n\r\n  try {\r\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\r\n    \r\n    dispatch({\r\n      type: ACTIVATION_SUCCESS,\r\n    });\r\n\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ACTIVATION_FAIL\r\n    });\r\n  }\r\n}\r\n\r\nexport const reset_password = (email) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ email });\r\n\r\n  try {\r\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\r\n\r\n    dispatch({\r\n      type: PASSWORD_RESET_SUCCESS\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PASSWORD_RESET_FAIL\r\n    });\r\n  }\r\n\r\n};\r\n\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n  \r\n  try {\r\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\r\n\r\n    dispatch({\r\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PASSWORD_RESET_CONFIRM_FAIL\r\n    });\r\n  }\r\n\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n  dispatch({\r\n    type: LOGOUT\r\n  });\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}